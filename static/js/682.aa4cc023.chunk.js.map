{"version":3,"file":"static/js/682.aa4cc023.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hooks.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\r\nimport avengers from '../../resources/img/Avengers.png';\r\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"app__banner\">\r\n            <img src={avengers} alt=\"Avengers\"/>\r\n            <div className=\"app__banner-text\">\r\n                New comics every week!<br/>\r\n                Stay tuned!\r\n            </div>\r\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} \r\n        src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import { useEffect, useState } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nimport './comicsList.scss';\r\n\r\n\r\n\r\n\r\nconst ComicsList = () => {\r\n\r\n    const {error, loading, getAllComics} = useMarvelService();\r\n\r\n    const [comicsList, setComicsList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [comicsEnded, setComicsEnded] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        onRequest();\r\n    }, []);\r\n\r\n    const onRequest = (offset, initial) => {\r\n\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllComics(offset)\r\n            .then(onComicsListLoaded)\r\n    }\r\n\r\n    const onComicsListLoaded = (newComicsList) => {\r\n\r\n        let ended = false;\r\n        if (newComicsList.length < 8) {\r\n            ended = true;\r\n        }\r\n\r\n        setComicsList(comicsList => [...comicsList, ...newComicsList]);\r\n        setOffset(offset => offset + 9 );\r\n        setNewItemLoading(true);\r\n        setComicsEnded(ended);\r\n    }\r\n\r\n    const renderItems = (arr) => {\r\n\r\n        const items = arr.map((item, i) => {\r\n\r\n            let price = '';\r\n            /* if(item.price === 0) {\r\n                noPrice = \"NOT AVAILABEL\";\r\n            } */\r\n\r\n            item.price === 0 ? price = \"NOT AVAILABEL\" : price = item.price;\r\n\r\n            return(\r\n                <li className=\"comics__item \" key={i}>\r\n                    <Link to={`/comics/${item.id}`}>\r\n                        <img \r\n                            src={`${item.thumbnail}`} \r\n                            alt=\"ultimate war\" \r\n                            className=\"comics__item-img\"\r\n                        />\r\n                        <div className=\"comics__item-name\">{item.title}</div>\r\n                        <div className=\"comics__item-price\">{price}</div>\r\n                    </Link>\r\n                </li>\r\n            )\r\n        });\r\n\r\n        return(\r\n            <ul className=\"comics__grid\">\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner/>:null;\r\n\r\n    const items = renderItems(comicsList);\r\n    return (\r\n        <div className=\"comics__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{'display' : comicsEnded ? 'none' : 'block'}}>\r\n                <div \r\n                    className=\"inner\" \r\n                    onClick={() => onRequest(offset)}>load more\r\n                </div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComicsList;","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from '../appBanner/AppBanner';\r\n\r\nconst ComicsPage = () => {\r\n\r\n\r\n\r\n    return(\r\n        <>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ComicsPage;","import { useState, useCallback } from \"react\";\r\n\r\n\r\nexport const useHttp = () => {\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = \"GET\", body = null, headers = {'Content-Type': 'application/json'}) => \r\n    {\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok)\r\n            {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n\r\n            throw e;\r\n        }\r\n\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return { loading, request, error, clearError};\r\n\r\n}","import {useHttp} from '../hooks/http.hooks';\r\n\r\nconst useMarvelService = () => { // Работа с Api\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    // Свойства классов\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=5d46ad89683c6e752b4a85a037d55688';\r\n    const _baseOffset = 210;\r\n\r\n    \r\n\r\n\r\n    \r\n\r\n\r\n    const getAllCharacters = async (ofsset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${ofsset}&${_apiKey}`);\r\n        \r\n        return res.data.results.map(_transformCharacter);\r\n\r\n    }\r\n\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (ofsset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${ofsset}&${_apiKey}`);\r\n\r\n        //console.log(res.data.results);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?&${_apiKey}`);\r\n        //console.log(res);\r\n        console.log(res.data.results[0]);\r\n        return _transformComics(res.data.results[0])\r\n    }\r\n\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            title: comic.title,\r\n            description: comic.description || 'There is no description',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            price: comic.prices[0].price + '$',\r\n            id: comic.id,\r\n            language: comic.textObjects.language || 'en-us',\r\n            pageCount: comic.pageCount ? `${comic.pageCount} p.` : 'No information about the number of pages',\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        //console.log(char.description.length);\r\n        if(char.description.length > 210)\r\n        {\r\n            char.description = `${char.description.slice(0, 210)}...`;\r\n        }\r\n        else if(char.description.length === 0)\r\n        {\r\n            char.description =  \"Information not found\";\r\n        }\r\n        return {\r\n            name: char.name,\r\n            description: char.description ,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    return {getCharacter, getAllCharacters, loading, error, clearError, getAllComics, getComic};\r\n}\r\n\r\nexport default useMarvelService;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","ComicsList","error","loading","getAllComics","useMarvelService","comicsList","setComicsList","useState","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","errorMessage","spinner","Spinner","items","arr","map","item","i","price","Link","to","id","thumbnail","title","renderItems","disabled","onClick","ComicsPage","_Fragment","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformComics","comic","description","path","extension","prices","language","textObjects","pageCount","_transformCharacter","char","slice","name","homepage","urls","wiki","comics","getCharacter","res","results","getAllCharacters","ofsset","getComic","console","log"],"sourceRoot":""}