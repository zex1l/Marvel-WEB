{"version":3,"file":"static/js/243.6a699a31.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SingleComicPage.js","hooks/http.hooks.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\r\nimport avengers from '../../resources/img/Avengers.png';\r\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"app__banner\">\r\n            <img src={avengers} alt=\"Avengers\"/>\r\n            <div className=\"app__banner-text\">\r\n                New comics every week!<br/>\r\n                Stay tuned!\r\n            </div>\r\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} \r\n        src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import { useParams, Link } from 'react-router-dom';\r\n\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner';\r\n\r\nimport './singleComicPage.scss';\r\nimport AppBanner from '../appBanner/AppBanner';\r\n\r\n\r\n\r\nconst SingleComicPage = () => {\r\n    \r\n    const {comicId} = useParams();\r\n    //console.log(useParams());\r\n\r\n    const [comic, setComic] = useState(null);\r\n\r\n    const {loading, error, getComic, clearError} = useMarvelService();\r\n\r\n\r\n    useEffect(() => {\r\n        updateComic()\r\n    }, [comicId])\r\n\r\n    const updateComic = () => {\r\n        clearError();\r\n        getComic(comicId)\r\n            .then(onComicLoaded)\r\n    }\r\n\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null;\r\n\r\n    return (\r\n        <>\r\n        <AppBanner/>\r\n        {errorMessage}\r\n        {spinner}\r\n        {content}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nconst View = ({comic}) => {\r\n\r\n    console.log();\r\n\r\n    const {title, description, thumbnail, price, id, pageCount, language} = comic;\r\n\r\n    return(\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language: {language}</p>\r\n                <div className=\"single-comic__price\">{price}</div>\r\n            </div>\r\n            <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;","import { useState, useCallback } from \"react\";\r\n\r\n\r\nexport const useHttp = () => {\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = \"GET\", body = null, headers = {'Content-Type': 'application/json'}) => \r\n    {\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok)\r\n            {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n\r\n            throw e;\r\n        }\r\n\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return { loading, request, error, clearError};\r\n\r\n}","import {useHttp} from '../hooks/http.hooks';\r\n\r\nconst useMarvelService = () => { // Работа с Api\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    // Свойства классов\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=5d46ad89683c6e752b4a85a037d55688';\r\n    const _baseOffset = 210;\r\n\r\n    \r\n\r\n\r\n    \r\n\r\n\r\n    const getAllCharacters = async (ofsset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${ofsset}&${_apiKey}`);\r\n        \r\n        return res.data.results.map(_transformCharacter);\r\n\r\n    }\r\n\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (ofsset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${ofsset}&${_apiKey}`);\r\n\r\n        //console.log(res.data.results);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?&${_apiKey}`);\r\n        //console.log(res);\r\n        console.log(res.data.results[0]);\r\n        return _transformComics(res.data.results[0])\r\n    }\r\n\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            title: comic.title,\r\n            description: comic.description || 'There is no description',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            price: comic.prices[0].price + '$',\r\n            id: comic.id,\r\n            language: comic.textObjects.language || 'en-us',\r\n            pageCount: comic.pageCount ? `${comic.pageCount} p.` : 'No information about the number of pages',\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        //console.log(char.description.length);\r\n        if(char.description.length > 210)\r\n        {\r\n            char.description = `${char.description.slice(0, 210)}...`;\r\n        }\r\n        else if(char.description.length === 0)\r\n        {\r\n            char.description =  \"Information not found\";\r\n        }\r\n        return {\r\n            name: char.name,\r\n            description: char.description ,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    return {getCharacter, getAllCharacters, loading, error, clearError, getAllComics, getComic};\r\n}\r\n\r\nexport default useMarvelService;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","View","_ref","comic","console","log","title","description","thumbnail","price","id","pageCount","language","Link","to","SingleComicPage","comicId","useParams","setComic","useState","loading","error","getComic","clearError","useMarvelService","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformComics","path","extension","prices","textObjects","_transformCharacter","char","slice","name","homepage","urls","wiki","comics","items","getCharacter","res","results","getAllCharacters","ofsset","map","getAllComics"],"sourceRoot":""}