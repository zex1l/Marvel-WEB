{"version":3,"file":"static/js/820.a1a5dec7.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/ErrorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hooks.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} \r\n        src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = (props) => {\r\n    \r\n    const [char, setChar] = useState({});\r\n    const {loading, error, getCharacter, clearError} = useMarvelService(); \r\n\r\n\r\n    useEffect(() => {\r\n        updateChar()\r\n    }, [])\r\n\r\n    \r\n        //timerId = setInterval(this.updateChar, 5000);\r\n        //console.log(\"asdasd\");\r\n\r\n\r\n       // clearInterval(this.timerId);\r\n    \r\n\r\n\r\n\r\n\r\n    // Обновление стейта\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n    \r\n\r\n    // Генерация персонажа и вызов обновление стейта\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n\r\n        getCharacter(id)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error) ? <View char={char}/> : null;\r\n    \r\n    // Если в переменных будет null, то отображаться ничего не будет\r\n    return (\r\n        <div className=\"randomchar\">\r\n            \r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button className=\"button button__main\"\r\n                onClick={updateChar}>\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n    \r\n}\r\n\r\n\r\n// Умный компонент, нужен для условия в render()\r\nconst View = ({char}) => {\r\n    let {name, description, thumbnail, homepage, wiki} = char;\r\n\r\n\r\n    if(description === '')\r\n    {\r\n        description = \"Information not found\";\r\n    }\r\n\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import React, { useState, useEffect, useRef } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner';\r\n\r\nimport './charList.scss';\r\n\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n    const [activeCard, setActiveCard] = useState(false);\r\n\r\n    \r\n    \r\n     const {loading, error, getAllCharacters} = useMarvelService();\r\n   /*  activeClass = ''; */\r\n    //char__item_selected\r\n   \r\n\r\n   /*  selectCard = () => {\r\n        this.infoCard(this.cardRef)\r\n\r\n        this.setState(({activeCard}) => ({\r\n            activeCard: !activeCard\r\n        }))\r\n        \r\n    }\r\n\r\n    infoCard = card => {\r\n        \r\n        if(this.state.activeCard) {\r\n            this.activeClass = ' char__item_selected';\r\n            card.current.className += this.activeClass;\r\n        }\r\n        else {\r\n            card.current.className = '';\r\n            card.current.className += 'char__item';\r\n        }\r\n        console.log(card.current.className);\r\n    } */\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, [])\r\n\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        \r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n    }\r\n\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if(newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        setNewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(charEnded => ended);\r\n    }\r\n\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n\r\n    const focusOnItem = id => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        \r\n    }\r\n\r\n\r\n\r\n    // Этот метод создан для оптимизации, \r\n    // чтобы не помещать такую конструкцию в метод render\r\n    function renderItems(arr) {\r\n\r\n        const items =  arr.map((item, i) => {\r\n            \r\n            let imgStyle = {'objectFit' : 'cover'};\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'unset'};\r\n            }\r\n            \r\n\r\n\r\n            return (\r\n                <li \r\n                    className='char__item'\r\n                    key={item.id}\r\n                    onClick={() => {\r\n                        props.onCharSelected(item.id)\r\n                        focusOnItem(i)\r\n                    }}\r\n                    \r\n                    ref={el => itemRefs.current[i] = el}>\r\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\r\n                        <div className=\"char__name\">{item.name}</div>\r\n                </li>\r\n            )\r\n        });\r\n        // А эта конструкция вынесена для центровки спиннера/ошибки\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    \r\n\r\n   \r\n    \r\n    const items = renderItems(charList);\r\n    \r\n    \r\n    // Логика для проверки\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\r\n    \r\n\r\n    \r\n    return (\r\n        <div className=\"char__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button className=\"button button__main button__long\"\r\n            disabled={newItemLoading}\r\n            style={{'display': charEnded? 'none': 'block'}}\r\n            onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default CharList;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner';\r\nimport Skeleton from \"../skeleton/Skeleton\";\r\n\r\nimport './charInfo.scss';\r\n\r\n\r\nconst CharInfo = (props) =>  {\r\n\r\n    const [char, setChar] = useState(null);\r\n\r\n    const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [props.charId])\r\n\r\n    \r\n \r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n\r\n        clearError();\r\n        if(!charId) {\r\n            return;\r\n        }\r\n\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n\r\n        setChar(char);\r\n\r\n\r\n    }\r\n\r\n\r\n    \r\n\r\n    const skeleton =  char || loading || error ? null : <Skeleton/>;\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\r\n\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {skeleton}\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </div>\r\n    )\r\n    \r\n    \r\n    \r\n}\r\n\r\n\r\nconst View = ({char}) => {\r\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\r\n\r\n\r\n    let imgStyle = {\r\n        'ogjectFit' : 'cover'\r\n    };\r\n    if(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg')\r\n    {\r\n        imgStyle = {\r\n            'objectFit' : 'contain'\r\n        };\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                    <img src={thumbnail} alt=\"abyss\" style={imgStyle}/>\r\n                    <div>\r\n                        <div className=\"char__info-name\">{name}</div>\r\n                        <div className=\"char__btns\">\r\n                            <a href={homepage} className=\"button button__main\">\r\n                                <div className=\"inner\">homepage</div>\r\n                            </a>\r\n                            <a href={wiki} className=\"button button__secondary\">\r\n                                <div className=\"inner\">Wiki</div>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"char__descr\">\r\n                    {description}\r\n                </div>\r\n                <div className=\"char__comics\">Comics:</div>\r\n                <ul className=\"char__comics-list\">\r\n                    {comics.length > 0 ? null : 'There is no comics with this character'}\r\n                    {\r\n                        comics.map((item, i) => {\r\n                            // Ограничение комиксов\r\n                            if(i > 9) return;\r\n                            return (\r\n                                <li key={i} className=\"char__comics-item\">\r\n                                    {item.name}\r\n                                </li>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo)\r\n    {\r\n        console.log(error, errorInfo);\r\n        this.setState({error: true});\r\n    }\r\n\r\n\r\n    render() \r\n    {\r\n        if(this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n\r\n","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = (props) => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id)\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            \r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                    <CharInfo charId={selectedChar}/> \r\n                </ErrorBoundary>\r\n                <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useState, useCallback } from \"react\";\r\n\r\n\r\nexport const useHttp = () => {\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = \"GET\", body = null, headers = {'Content-Type': 'application/json'}) => \r\n    {\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok)\r\n            {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n\r\n            throw e;\r\n        }\r\n\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return { loading, request, error, clearError};\r\n\r\n}","import {useHttp} from '../hooks/http.hooks';\r\n\r\nconst useMarvelService = () => { // Работа с Api\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    // Свойства классов\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=5d46ad89683c6e752b4a85a037d55688';\r\n    const _baseOffset = 210;\r\n\r\n    \r\n\r\n\r\n    \r\n\r\n\r\n    const getAllCharacters = async (ofsset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${ofsset}&${_apiKey}`);\r\n        \r\n        return res.data.results.map(_transformCharacter);\r\n\r\n    }\r\n\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (ofsset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${ofsset}&${_apiKey}`);\r\n\r\n        //console.log(res.data.results);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?&${_apiKey}`);\r\n        //console.log(res);\r\n        console.log(res.data.results[0]);\r\n        return _transformComics(res.data.results[0])\r\n    }\r\n\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            title: comic.title,\r\n            description: comic.description || 'There is no description',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            price: comic.prices[0].price + '$',\r\n            id: comic.id,\r\n            language: comic.textObjects.language || 'en-us',\r\n            pageCount: comic.pageCount ? `${comic.pageCount} p.` : 'No information about the number of pages',\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        //console.log(char.description.length);\r\n        if(char.description.length > 210)\r\n        {\r\n            char.description = `${char.description.slice(0, 210)}...`;\r\n        }\r\n        else if(char.description.length === 0)\r\n        {\r\n            char.description =  \"Information not found\";\r\n        }\r\n        return {\r\n            name: char.name,\r\n            description: char.description ,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    return {getCharacter, getAllCharacters, loading, error, clearError, getAllComics, getComic};\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","props","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","activeCard","setActiveCard","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","items","arr","map","item","i","onCharSelected","current","forEach","classList","remove","add","ref","el","renderItems","disabled","Skeleton","_Fragment","comics","charId","skeleton","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","selectedChar","RandomChar","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformComics","comic","title","path","extension","price","prices","language","textObjects","pageCount","_transformCharacter","slice","urls","res","results","ofsset","getAllComics","getComic"],"sourceRoot":""}